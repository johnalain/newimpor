#https://youtu.be/sQ1Q96-Vhjk?list=PLlvFEn0NKwXKsfAM-mXulCXOtGvDKQs81
numbers:list[int] = list(range(1, 11))
text:str = 'hello, world'

#to start. iterable:
print(numbers[::-1])#output reverse the list [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
print(text[::-1])#output reverse the text dlrow ,olleh
#[::-1] same as [nothing, nothing, -1]
print('*'*20)

rev: slice = slice(None,None,-1)#same as[::-1]this is better change notation in one place
#and give same result
print(numbers[rev])#[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
print(text[rev])#dlrow ,olleh
print('*'*20)
rev: slice = slice(None,None,-2)
print(numbers[rev])#[10, 8, 6, 4, 2] with step of 2
print(text[rev])#drw,le  with step of 2
print('*'*20)
f_five : slice = slice(None,5)#start from beginning
print(numbers[f_five])#[1, 2, 3, 4, 5]
print(text[f_five])#hello

#TRICK # 2
print('_'*30)
set_a: set[int]={1, 2, 3, 4, 5}
set_b: set[int]={4,5,6,7,8}
#combine 2 sets
print(set_a | set_b)#{1, 2, 3, 4, 5, 6, 7, 8}
print(set_a - set_b)#{1, 2, 3}
print(set_b - set_a)#{8, 6, 7}
print('@'*30)
print(set_b & set_a)#{4, 5}intersection (common elements btween a & b)
print(set_b ^ set_a)#{1, 2, 3, 6, 7, 8}unique element
#TRICK # 3
print('&'*30)
class Book:
    def __init__(self,title:str,pages:int)->None:
        self.title = title
        self.pages = pages
    
# using f format
    def __format__(self, format_spec: str) -> str:
        match format_spec:
           case 'time':
               return f'{self.pages / 60:2f}h'
           case 'caps':
               return self.title.upper()
           case _:
               raise ValueError(f'unknowed specifier for book()')
def main() ->None:
    harry_potter: Book = Book('very harry_potter',300)
    python_daily: Book = Book('python daily',20)
    print(f'{harry_potter:caps} ')
    print(f'Read time: {harry_potter:time}')
    print('7'*29)
    print(f'{python_daily:caps} ')
    print(f'Read time: {python_daily:time}')
    #output:
    #PYTHON DAILY 
    # Read time: 0.333333h
#output:
# VERY HARRY_POTTER 
# Read time: 5.000000h
if __name__ == '__main__':
    main()
#TRICK #4
users: dict[int, str]={0:'bob',1:'marie'}# using int as key and string as value
#check if user exist
user: str| None = users.get(3)#output no userfound...if doesn't exist if go to else
# change the  key in get(0)
user: str| None = users.get(0)#output bob exist!

if user:
    print(f'{user} exist!')
else:
    print('no user found...')
print('4'*49)
def get_info(text: str) -> dict:
    return{'words': (words:=text.split()),
           'words_count': len(words),
           'character_count': len(''.join(words))}
print(get_info('bob'))#ouput {'words': ['bob'], 'words_count': 1, 'character_count': 3}
print(get_info('hello bob'))
print(get_info('my name is bob'))#output:
# {'words': ['bob'], 'words_count': 1, 'character_count': 3}
# {'words': ['hello', 'bob'], 'words_count': 2, 'character_count': 8}
# {'words': ['my', 'name', 'is', 'bob'], 'words_count': 4, 'character_count': 11}
from typing import Callable
def multiply_setup(a: float)->callable:
    def multiply(b: float)-> float:
        return a * b
    return multiply
double: callable = multiply_setup(2)
triple: callable = multiply_setup(3)
print('$'*30)
print(double(5))
print(double(3))
print(double(100))
#10
# 6
# 200
def multiply_setup(a: float) ->Callable:
    def multiply(b: float) -> float:
        return a * b
    return multiply

double: Callable = multiply_setup(2)
triple: Callable = multiply_setup(3)
print(double(5))
print(double(3))
print(double(200))

print(triple(5))
print(triple(6))
print(triple(100))
        
    

           

